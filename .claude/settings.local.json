{
  "permissions": {
    "allow": [
      "Bash(tree:*)",
      "Bash(git rm:*)",
      "Bash(git add:*)",
      "Bash(git pull:*)",
      "Bash(git checkout:*)",
      "Bash(git clone:*)",
      "Bash(git init:*)",
      "Bash(git remote add:*)",
      "Bash(git log:*)",
      "Bash(git config:*)",
      "Bash(git tag:*)",
      "Bash(git mv:*)",
      "Bash(npm run trinity:init:*)",
      "Bash(npm run trinity:verify:*)",
      "Bash(npm run dev:*)",
      "Bash(npm install:*)",
      "Bash(npm uninstall:*)",
      "Bash(npm run build:*)",
      "Bash(npm start)",
      "Bash(npm audit:*)",
      "Bash(npm update:*)",
      "Bash(npm ls:*)",
      "Bash(npm cache clean:*)",
      "Bash(npm run tauri:dev:*)",
      "Bash(npm run tauri icon:*)",
      "Bash(npm run type-check:*)",
      "Bash(npm run lint)",
      "Bash(npm:*)",
      "Bash(npx tauri icon:*)",
      "Bash(npx babel:*)",
      "Bash(npx eslint:*)",
      "Bash(npx madge:*)",
      "Bash(node:*)",
      "Bash(flutter:*)",
      "Bash(flutter create:*)",
      "Bash(dart:*)",
      "Bash(/c/development/flutter/bin/flutter:*)",
      "Bash(rustc:*)",
      "Bash(cargo:*)",
      "Bash(cargo --version)",
      "Bash(cargo tauri icon:*)",
      "Bash(cargo check:*)",
      "Bash(mkdir:*)",
      "Bash(dir:*)",
      "Bash(ls:*)",
      "Bash(cd:*)",
      "Bash(copy:*)",
      "Bash(cp:*)",
      "Bash(rm:*)",
      "Bash(mv:*)",
      "Bash(move:*)",
      "Bash(del:*)",
      "Bash(cat:*)",
      "Bash(echo:*)",
      "Bash(touch:*)",
      "Bash(chmod:*)",
      "Bash(grep:*)",
      "Bash(find:*)",
      "Bash(sed:*)",
      "Bash(awk:*)",
      "Bash(wc:*)",
      "Bash(tee:*)",
      "Bash(unzip:*)",
      "Bash(cmd:*)",
      "Bash(powershell:*)",
      "Bash(call:*)",
      "Bash(start:*)",
      "Bash(taskkill:*)",
      "Bash(tasklist)",
      "Bash(pkill:*)",
      "Bash(timeout:*)",
      "Bash(ping:*)",
      "Bash(netstat:*)",
      "Bash(nslookup:*)",
      "Bash(curl:*)",
      "Bash(ssh:*)",
      "Bash(brew install:*)",
      "Bash(osascript:*)",
      "Bash(lsof:*)",
      "Bash(source:*)",
      "Bash(source ~/.bashrc)",
      "Bash(export PATH=\"$HOME/.cargo/bin:$PATH\")",
      "Bash(alias:*)",
      "Bash(set -o)",
      "Bash(where bash)",
      "Bash(claude:*)",
      "Bash(for:*)",
      "Bash(do:*)",
      "Bash(done)",
      "Bash(if:*)",
      "Bash(then:*)",
      "Bash(else:*)",
      "Bash(fi)",
      "Bash(test:*)",
      "Bash(true)",
      "Bash(/bashes)",
      "Read(/private/tmp/**)",
      "Read(C:\\Users\\lukaf\\Downloads/**)",
      "Read(/C:\\Users\\lukaf\\Documents\\Cola Records\\**)",
      "Read(//c/Users/lukaf/**)",
      "Read(//usr/bin/**)",
      "Read(//bin/**)",
      "WebSearch",
      "WebFetch(domain:pub.dev)",
      "WebFetch(domain:www.linkedin.com)",
      "WebFetch(domain:www.sunny-stack.com)",
      "mcp__ide__getDiagnostics",
      "Bash(bash:*)",
      "Bash(SOURCE_DIR=\"src\")",
      "Bash(elif grep -q \"@angular\" package.json)",
      "Bash(SOURCE_DIR=\"src/app\")",
      "Bash(elif grep -q \"vue\" package.json)",
      "Bash(elif [ -f \"pubspec.yaml\" ])",
      "Bash(FRAMEWORK=\"Flutter\")",
      "Bash(SOURCE_DIR=\"lib\")",
      "Bash(elif [ -f \"requirements.txt\" ])",
      "Bash([ -f \"setup.py\" ])",
      "Bash(FRAMEWORK=\"Python\")",
      "Bash(SOURCE_DIR=\"app\")",
      "Bash(elif [ -f \"Cargo.toml\" ])",
      "Bash(FRAMEWORK=\"Rust\")",
      "Bash(FRAMEWORK=\"Unknown\")",
      "Bash([ -d \"trinity\" ])",
      "Bash([ -d \"trinity/templates\" ])",
      "Bash([ -f \"trinity/knowledge-base/ARCHITECTURE.md\" ])",
      "Bash([ -f \"trinity/knowledge-base/Trinity.md\" ])",
      "Bash([ -f \"trinity/knowledge-base/ISSUES.md\" ])",
      "Bash([ -f \"trinity/knowledge-base/To-do.md\" ])",
      "Bash([ -f \"CLAUDE.md\" ])",
      "Bash([ -f \"trinity/CLAUDE.md\" ])",
      "Bash([ -f \"lib/CLAUDE.md\" ])",
      "Bash([ -f \"trinity-method-source/temp/debug-map-alpha.txt\" ])",
      "Bash([ -f \"trinity-method-source/temp/debug-map-beta.txt\" ])",
      "Bash([ -f \"trinity-method-source/temp/debug-map-gamma.txt\" ])",
      "Bash(elif [ -f \".vscode/settings.json\" ])",
      "WebFetch(domain:help.elgato.com)",
      "WebFetch(domain:docs.elgato.com)",
      "Bash(zip:*)",
      "Read(//c/Program Files/Elgato/StreamDeck/Plugins/com.elgato.streamdeck.dial.sdPlugin/**)",
      "Read(//c/Program Files/Elgato/StreamDeck/Plugins/**)",
      "WebFetch(domain:developer.elgato.com)",
      "Bash(declare:*)",
      "Read(//d/Projects/Stilltide GPT/Stilltide/**)",
      "WebFetch(domain:github.com)",
      "Bash(PROJECT_NAME=\"Trinity-Method\")",
      "Bash(SESSION_TYPE=\"METHODOLOGY\")",
      "Bash(SESSION_NUMBER=\"001\")",
      "Bash(git restore:*)",
      "Bash(export SESSION_PROJECT=\"[PROJECT-NAME]\")",
      "Bash(export SESSION_TYPE=\"[TYPE]\")",
      "Bash(PROJECT_NAME=\"Cola-Records-Plugin\")",
      "Bash(SESSION_TYPE=\"DEV\")",
      "Bash(__NEW_LINE__ echo \"[TRINITY]: Session initialized - Date: $SESSION_DATE Time: $SESSION_TIME\")",
      "Bash(export SESSION_PROJECT=\"Sunny-Stack\")",
      "Bash(export SESSION_TYPE=\"DEV\")",
      "Bash(PROJECT_NAME=\"Sunny-Stack\")",
      "Bash(__NEW_LINE__ ARCHIVE_PATH=\"C:/Users/lukaf/Desktop/Dev Work/trinity-method/Session Database/$PROJECT_NAME/$SESSION_DATE-$SESSION_TYPE-$SESSION_NUMBER\")",
      "Bash(__NEW_LINE__ mkdir -p \"$ARCHIVE_PATH/Work Orders\")",
      "Bash(__NEW_LINE__ echo \"Archive location: $ARCHIVE_PATH\")",
      "Bash(export SESSION_PROJECT=\"Trinity-Method\")",
      "Bash(sqlite3:*)",
      "Bash(FRAMEWORK=\"Node\")",
      "Bash([ -d \"app\" ])",
      "Bash(TRINITY_HQ=\"C:/Users/lukaf/Desktop/Dev Work/trinity-method\")",
      "Bash([ -f \"package.json\" ])",
      "Bash([ -f \"src/CLAUDE.md\" ])",
      "Bash(utils/scheduler.js)",
      "Bash(deploy-commands.js)",
      "Bash(npx tsc:*)",
      "Bash(cut:*)",
      "WebFetch(domain:discordjs.guide)",
      "WebFetch(domain:discord.com)",
      "Bash(export:*)",
      "Bash(npx coverage-badge-creator:*)",
      "Bash(while read file)",
      "Bash(findstr:*)",
      "Bash(/dev/null)",
      "Bash(REPO_DOC=\"trinity/knowledge-base/$doc\")",
      "Bash([ -f \"$HQ_DOC\" ])",
      "Bash([ -f \".pre-commit-config.yaml\" ])",
      "Bash([ -f \".gitlab-ci.yml\" ])",
      "Bash([ -f \"azure-pipelines.yml\" ])",
      "Bash(GITHUB_SOURCE=\"C:/Users/lukaf/Desktop/Dev Work/trinity-dashboard/.github\")",
      "Bash(VSCODE_SOURCE=\"C:/Users/lukaf/Desktop/Dev Work/trinity-dashboard/.vscode\")",
      "Bash(CONFIG_SOURCE=\"C:/Users/lukaf/Desktop/Dev Work/trinity-dashboard\")",
      "Bash(pip install:*)",
      "Bash(pre-commit:*)",
      "Bash([ -f \".eslintrc.js\" ])",
      "Bash([ -f \"jest.config.js\" ])",
      "Bash([ -f \".vscode/settings.json\" ])",
      "Bash(PROJECT_NAME=\"Bwaincell\")",
      "Bash([ -f \"pubspec.yaml\" ])",
      "Bash([ -f \"Cargo.toml\" ])",
      "Bash([ -f \"CMakeLists.txt\" ])",
      "Bash(TRINITY_INBOX=\"C:/Users/lukaf/Desktop/Dev Work/trinity-method/Trinity-Inbox\" ls -la \"$TRINITY_INBOX/\")",
      "Bash(__NEW_LINE__ echo \"[CC]: Project Home: $PROJECT_HOME\")",
      "Bash(PROJECT_HOME=\"C:/Users/lukaf/Desktop/Dev Work/trinity-method/Projects/Bwaincell\")",
      "Bash(PROJECT_WORKORDERS=\"$PROJECT_HOME/Work Orders\")",
      "Bash(PROJECT_REPORTS=\"$PROJECT_HOME/Reports\")",
      "Bash(__NEW_LINE__ echo \"[CC]: Creating project directories if needed...\")",
      "Bash(__NEW_LINE__ echo \"[CC]: Checking Work Orders folder...\")",
      "Bash(PROJECT_WORKORDERS=\"C:/Users/lukaf/Desktop/Dev Work/trinity-method/Projects/Bwaincell/Work Orders\")",
      "Bash(PROJECT_WORKORDERS=\"C:/Users/lukaf/Desktop/Dev Work/trinity-method/Projects/Bwaincell/Work Orders\" echo \"[CC]: Checking Work Orders at: $PROJECT_WORKORDERS\" ls -t \"$PROJECT_WORKORDERS/\"*.md)",
      "Bash(npm test)",
      "Bash(npm test:*)",
      "Bash(fly status:*)",
      "Bash(fly apps:*)",
      "Bash(npm run typecheck:*)"
    ],
    "deny": [],
    "ask": [],
    "additionalDirectories": [
      "C:\\c",
      "/Users/luka"
    ]
  }
}
